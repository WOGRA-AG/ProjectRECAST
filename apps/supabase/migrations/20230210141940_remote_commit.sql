drop policy "Enable read access for all users" on "public"."file_upload";

drop policy "Enable write access for all users" on "public"."file_upload";

alter table "public"."file_upload" drop constraint "file_upload_bucket_fkey";

alter table "public"."file_upload" drop constraint "file_upload_object_fkey";

alter table "public"."file_upload" drop constraint "file_upload_user_fkey";

alter table "public"."file_upload" drop constraint "tf_test_table_pkey";

drop index if exists "public"."tf_test_table_pkey";

drop table "public"."file_upload";

create table "public"."devices" (
    "id" bigint generated by default as identity not null,
    "device_id" uuid default uuid_generate_v4(),
    "user_id" uuid
);


alter table "public"."devices" enable row level security;

create table "public"."upload" (
    "id" bigint generated by default as identity not null,
    "active" boolean,
    "bucket" text,
    "prefix" text,
    "device_id" uuid,
    "local_folder_name" text,
    "user_id" uuid
);


alter table "public"."upload" enable row level security;

CREATE UNIQUE INDEX devices_device_id_key ON public.devices USING btree (device_id);

CREATE UNIQUE INDEX devices_pkey ON public.devices USING btree (id);

CREATE UNIQUE INDEX tf_test_table_pkey ON public.upload USING btree (id);

alter table "public"."devices" add constraint "devices_pkey" PRIMARY KEY using index "devices_pkey";

alter table "public"."upload" add constraint "tf_test_table_pkey" PRIMARY KEY using index "tf_test_table_pkey";

alter table "public"."devices" add constraint "devices_device_id_key" UNIQUE using index "devices_device_id_key";

alter table "public"."devices" add constraint "devices_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."devices" validate constraint "devices_user_id_fkey";

alter table "public"."upload" add constraint "upload_bucket_fkey" FOREIGN KEY (bucket) REFERENCES storage.buckets(id) not valid;

alter table "public"."upload" validate constraint "upload_bucket_fkey";

alter table "public"."upload" add constraint "upload_device_id_fkey" FOREIGN KEY (device_id) REFERENCES devices(device_id) not valid;

alter table "public"."upload" validate constraint "upload_device_id_fkey";

alter table "public"."upload" add constraint "upload_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."upload" validate constraint "upload_user_id_fkey";

create policy "Enable read access for all users"
on "public"."devices"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Enable read access for all users"
on "public"."upload"
as permissive
for select
to public
using ((auth.uid() = user_id));



create policy "Give users access to own folder 1l5u1vl_0"
on "storage"."objects"
as permissive
for select
to anon
using ((bucket_id = 'upload'::text));


create policy "Give users access to own folder 1l5u1vl_1"
on "storage"."objects"
as permissive
for insert
to anon
with check ((bucket_id = 'upload'::text));


create policy "Give users access to own folder 1l5u1vl_2"
on "storage"."objects"
as permissive
for update
to anon
using ((bucket_id = 'upload'::text));


create policy "Give users access to own folder 1l5u1vl_3"
on "storage"."objects"
as permissive
for delete
to anon
using ((bucket_id = 'upload'::text));



