CREATE INDEX refresh_token_session_id ON auth.refresh_tokens USING btree (session_id);

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION auth.email()
 RETURNS text
 LANGUAGE sql
 STABLE
AS $function$
  select 
  	coalesce(
		nullif(current_setting('request.jwt.claim.email', true), ''),
		(nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
	)::text
$function$
;

CREATE OR REPLACE FUNCTION auth.role()
 RETURNS text
 LANGUAGE sql
 STABLE
AS $function$
  select 
  	coalesce(
		nullif(current_setting('request.jwt.claim.role', true), ''),
		(nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
	)::text
$function$
;

CREATE OR REPLACE FUNCTION auth.uid()
 RETURNS uuid
 LANGUAGE sql
 STABLE
AS $function$
  select 
  	coalesce(
		nullif(current_setting('request.jwt.claim.sub', true), ''),
		(nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
	)::uuid
$function$
;

CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user();


create table "public"."file_upload" (
    "id" bigint generated by default as identity not null,
    "propertyname" text,
    "user" uuid,
    "status" boolean,
    "bucket" text,
    "object" uuid
);


alter table "public"."file_upload" enable row level security;

CREATE UNIQUE INDEX tf_test_table_pkey ON public.file_upload USING btree (id);

CREATE UNIQUE INDEX unique_stepprop_element ON public.element_properties USING btree (step_property_id, element_id);

alter table "public"."file_upload" add constraint "tf_test_table_pkey" PRIMARY KEY using index "tf_test_table_pkey";

alter table "public"."element_properties" add constraint "unique_stepprop_element" UNIQUE using index "unique_stepprop_element";

alter table "public"."file_upload" add constraint "file_upload_bucket_fkey" FOREIGN KEY (bucket) REFERENCES storage.buckets(id) not valid;

alter table "public"."file_upload" validate constraint "file_upload_bucket_fkey";

alter table "public"."file_upload" add constraint "file_upload_object_fkey" FOREIGN KEY (object) REFERENCES storage.objects(id) not valid;

alter table "public"."file_upload" validate constraint "file_upload_object_fkey";

alter table "public"."file_upload" add constraint "file_upload_user_fkey" FOREIGN KEY ("user") REFERENCES auth.users(id) not valid;

alter table "public"."file_upload" validate constraint "file_upload_user_fkey";

create policy "Enable read access for all users"
on "public"."file_upload"
as permissive
for select
to public
using (true);


create policy "Enable write access for all users"
on "public"."file_upload"
as permissive
for insert
to public
with check (true);



create policy "Anyone can upload an avatar."
on "storage"."objects"
as permissive
for insert
to public
with check ((bucket_id = 'avatars'::text));


create policy "Avatar images are publicly accessible."
on "storage"."objects"
as permissive
for select
to public
using ((bucket_id = 'avatars'::text));


create policy "Give users access to own folder 1lemvxe_0"
on "storage"."objects"
as permissive
for select
to public
using (((bucket_id = 'values'::text) AND ((auth.uid())::text = (storage.foldername(name))[1]) AND (auth.role() = 'authenticated'::text)));


create policy "Give users access to own folder 1lemvxe_1"
on "storage"."objects"
as permissive
for insert
to public
with check (((bucket_id = 'values'::text) AND ((auth.uid())::text = (storage.foldername(name))[1]) AND (auth.role() = 'authenticated'::text)));


create policy "Give users access to own folder 1lemvxe_2"
on "storage"."objects"
as permissive
for update
to public
using (((bucket_id = 'values'::text) AND ((auth.uid())::text = (storage.foldername(name))[1]) AND (auth.role() = 'authenticated'::text)));


create policy "Give users access to own folder 1lemvxe_3"
on "storage"."objects"
as permissive
for delete
to public
using (((bucket_id = 'values'::text) AND ((auth.uid())::text = (storage.foldername(name))[1]) AND (auth.role() = 'authenticated'::text)));



